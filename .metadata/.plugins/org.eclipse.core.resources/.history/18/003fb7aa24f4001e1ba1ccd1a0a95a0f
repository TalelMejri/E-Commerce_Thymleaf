package com.mycompany.product.controller;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import com.mycompany.product.config.SecurityConfig;
import com.mycompany.product.config.UserDetailsServiceImpl;
import com.mycompany.product.model.User;
import com.mycompany.product.repository.UserRepository;
import com.mycompany.product.service.UserService;

@Controller
public class AuthController {
	
	@Autowired
	UserRepository userRepo;
	@Autowired
	SecurityConfig security;
	@Autowired
    UserDetailsServiceImpl userservice;
	@Autowired
	AuthenticationManager authenticationManager; 
	
	@Autowired
	UserService userServiceTest;
	
	 @GetMapping("/")
	 public String index() {
		  return "index"; 
	 }
	 
	 @GetMapping("/login")
	 public String LoginPage(Model model) {
		  User user = new User();
		  model.addAttribute("user", user);
		  return "login_page"; 
	 }
	 
	 @GetMapping("/register")
	 public String RegisterPage(Model model) {
		  User user = new User();
		  model.addAttribute("user", user);
		  return "register_page"; 
	 }
	 
	 @PostMapping("/RegisterUser")
	 public String RegisterUser(@ModelAttribute("user") User New_User) {
		  New_User.setRole("Client");
		  New_User.setPassword(security.passwordEncoder().encode(New_User.getPassword()));
		  userRepo.save(New_User);
		  return "login_page"; 
	 }
	 
		@PostMapping("/LoginUser")
		public String login(@RequestBody AuthController auth){
			try {
				if(userRepo.findByEmail(auth.getEmail())==null) {
					 return new ResponseEntity<String>("USER_NOT_FOUND",HttpStatus.CONFLICT);
				}
				Authentication authsuser =authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(auth.getEmail(),auth.getPassword()));
			}catch(Exception e) {
				return new ResponseEntity<String>("INVALID_CREDENTIALS",HttpStatus.CONFLICT);
			}
			UserDetails user_det=userservice.loadUserByUsername(auth.getEmail());
			User user=userServiceTest.getByEmail(auth.getEmail());
			if(!user.isEnabled()) {
				return new ResponseEntity<String>("User_Disabled",HttpStatus.CONFLICT);
			}
			String token=jwtTokenUtil.generateToken(user_det);
			JSONObject res=new JSONObject();
			res.appendField("token", token);
			res.appendField("user", user);
			return ResponseEntity.ok().body(res);
		}
	
}
